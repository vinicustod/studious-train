//
//  GSMapViewController.swift
//  StudiousBus
//
//  Created by vinicius.custodio on 13/05/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps

class GMSViewController: UIViewController, MapDisplayLogic {

    var interactor: MapBusinessLogic?
    var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?

    let defaultLocation = CLLocationCoordinate2D(latitude: 41.90123, longitude: 12.50091)

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        let router = MapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    lazy var mapView: GMSMapView = {
        let mapView = GMSMapView()
        mapView.delegate = self
        mapView.translatesAutoresizingMaskIntoConstraints = false

        return mapView
    }()

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

        addMapView()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

        mapView.animate(toZoom: 16)
        mapView.animate(toLocation: self.defaultLocation)
    }

    func addMapView() {
        self.view.addSubview(mapView)

        mapView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor).isActive = true
        mapView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor).isActive = true
        mapView.topAnchor.constraint(equalTo: self.view.topAnchor).isActive = true
        mapView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor).isActive = true
    }

    func fetchStations() {
        let request = Map.RetrieveStations.Request(currentLocation: mapView.projection.coordinate(for: mapView.center))
        interactor?.retrieveStations(request)
    }

    func displayStations(viewModel: Map.RetrieveStations.ViewModel) {
        mapView.clear()

        for station in viewModel.stations {
            let marker = GMSMarker(position: station.location)
            marker.map = mapView
            marker.title = station.name
            marker.appearAnimation = GMSMarkerAnimation.pop
            marker.userData = station
            marker.snippet = station.type
            marker.isDraggable = true
        }
    }
}

extension GMSViewController: GMSMapViewDelegate {
    func mapView(_ mapView: GMSMapView, idleAt position: GMSCameraPosition) {
        fetchStations()
    }
}
