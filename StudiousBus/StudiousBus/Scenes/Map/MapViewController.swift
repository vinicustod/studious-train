//
//  MapViewController.swift
//  StudiousBus
//
//  Created by vinicius.custodio on 11/05/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import MapKit

protocol MapDisplayLogic: class {
    func displayStations(viewModel: Map.RetrieveStations.ViewModel)
}

class MapViewController: UIViewController, MapDisplayLogic {
    var interactor: MapBusinessLogic?
    var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?

    private var defaultLocation: MKCoordinateRegion = {
        MKCoordinateRegion(center: CLLocationCoordinate2D(latitude: 41.90123, longitude: 12.50091),
                           latitudinalMeters: 200,
                           longitudinalMeters: 200)
    }()

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        let router = MapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    lazy var mapView: MKMapView = {
        let mapView = MKMapView()
        mapView.translatesAutoresizingMaskIntoConstraints = false
        mapView.delegate = self

        return mapView
    }()

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        addMapView()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

        mapView.setRegion(self.defaultLocation, animated: true)
    }

    private func addMapView() {
        view.addSubview(self.mapView)
        addMapViewConstraints()
    }

    private func addMapViewConstraints() {
        mapView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor).isActive = true
        mapView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor).isActive = true
        mapView.topAnchor.constraint(equalTo: self.view.topAnchor).isActive = true
        mapView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor).isActive = true
    }

    // MARK: Fetch Stations
    func fetchStations() {
        let request = Map.RetrieveStations.Request(currentLocation: mapView.centerCoordinate)
        interactor?.retrieveStations(request)
    }

    func displayStations(viewModel: Map.RetrieveStations.ViewModel) {
        for station in viewModel.stations {
            let annotation = MKPointAnnotation()
            annotation.coordinate = station.location

            mapView.addAnnotation(annotation)
        }
    }
}

extension MapViewController: MKMapViewDelegate {
    func mapViewDidChangeVisibleRegion(_ mapView: MKMapView) {
        print("[MapView] change visible")
        print(mapView.centerCoordinate)
    }

    func mapView(_ mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        fetchStations()
    }

    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        guard annotation is MKPointAnnotation else { return nil }

        let identifier = "Annotation"
        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)

        if annotationView == nil {
            annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)
        } else {
            annotationView!.annotation = annotation
        }

        if let annotationView = annotationView as? MKPinAnnotationView {
            annotationView.animatesDrop = true
        }

        return annotationView
    }
}
